# -*- coding: utf-8 -*-
"""Dehli_weather_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UJi7Dzv4ZBs45FvA2z-3sQ3-If8zfzUK
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report,confusion_matrix, ConfusionMatrixDisplay
import seaborn as sns

df = pd.read_csv('/content/delhiweatherreport1.csv')
df

df.isnull().sum()

df.columns = df.columns.str.strip()

label_encoder_conds = LabelEncoder()
label_encoder_wdire = LabelEncoder()

df['_conds'] = label_encoder_conds.fit_transform(df['_conds'])
df['_wdire'] = label_encoder_wdire.fit_transform(df['_wdire'])

df.replace(-9999, pd.NA, inplace=True)

numeric_df = df.select_dtypes(include=['number'])
df.fillna(numeric_df.mean(), inplace=True)

for i in df['_tempm']:
  if i > 45:
    i = 30

df

for index, value in df['_pressurem'].items():
  if pd.isna(value):
    df.loc[index, '_pressurem'] = df['_pressurem'].mean()

df.isnull().any()

df['datetime_utc'] = pd.to_datetime(df['datetime_utc'], format='%Y%m%d-%H:%M')

df.info()

predict = df['_rain']

df.drop('_rain', axis=1, inplace=True)

df

df = pd.concat([df, predict], axis=1)
df

train_df = df[df['datetime_utc'] <= '2015-01-01']
test_df = df[df['datetime_utc'] > '2015-01-01']

train_df.loc[:, 'predict'] = predict[train_df.index]
test_df.loc[:, 'predict'] = predict[test_df.index]
X_train = train_df.drop(['predict', 'datetime_utc','_rain'], axis=1)
y_train = train_df['predict']
X_test = test_df.drop(['predict', 'datetime_utc','_rain'], axis=1)
y_test = test_df['predict']

df.to_csv('cleaned_data.csv', index=False)

plt.plot(X_train['_tempm'], X_train['_rain'], label='_rain', marker='o', linestyle='')
plt.show()

model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model's performance
accuracy = accuracy_score(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print('Classification Report:')
print(classification_rep)

conf_matrix = confusion_matrix(y_test, y_pred)
ConfusionMatrixDisplay(conf_matrix).plot(cmap='Blues')
plt.title('Confusion Matrix')
plt.show()

